% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpUpdateTarget.R
\name{mlr_pipeops_updatetarget}
\alias{mlr_pipeops_updatetarget}
\alias{PipeOpUpdateTarget}
\title{PipeOpUpdateTarget}
\format{
Abstract \code{\link{R6Class}} inheriting from \code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
}
\description{
FOR INTERNAL USE IN MLR3ORDINAL ONLY!
EXPERIMENTAL, API SUBJECT TO CHANGE

Handles target transformation operations that do not need explicit inversion.
In case the new target is required during predict, creates a vector of \code{NA}.
Works similar to \code{\link[mlr3pipelines:PipeOpTargetTrafo]{PipeOpTargetTrafo}} and
\code{\link[mlr3pipelines:mlr_pipeops_targetmutate]{PipeOpTargetMutate}}, but forgoes the
inversion step.
In case target after the \code{trafo} is a factor, levels are saved to \verb{$state}.\cr

During prediction: Sets all target values to \code{NA} before calling the \code{trafo} again.
In case target after the \code{trafo} is a factor, levels saved in the \code{state} are
set during prediction.

As a special case when \code{trafo} is \code{identity} and \code{new_target_name} matches an existing column
name of the data of the input \code{\link[mlr3:Task]{Task}}, this column is set as the new target. Depending on
\code{drop_original_target} the original target is then either dropped or added to the features.
}
\section{Construction}{
\preformatted{PipeOpUpdateTarget$new(id, param_set = ParamSet$new(),
  param_vals = list(), packages = character(0))
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object. See \verb{$id} slot of \code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings given in \code{param_set}.
The subclass should have its own \code{param_vals} parameter and pass it on to \code{super$initialize()}.
Default \code{list()}.
}
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link[mlr3pipelines:PipeOpTargetTrafo]{PipeOpTargetTrafo}}, as well as:
\itemize{
\item \code{trafo} :: \code{function}\cr
Transformation function for the target. Should only be a function of the target, i.e., taking a
single argument. Default is \code{identity}.
Note, that the data passed on to the target is a \code{data.table} consisting of all target column.
\item \code{new_target_name} :: \code{character(1)}\cr
Optionally give the transformed target a new name. By default the original name is used.
\item \code{new_task_type} :: \code{character(1)}\cr
Optionally a new task type can be set. Legal types are listed in
\code{mlr_reflections$task_types$type}.
#' \code{drop_original_target} :: \code{logical(1)}\cr
Whether to drop the original target column. Default: \code{TRUE}.
}
}

\section{State}{

The \verb{$state} is a list of class levels for each target after trafo.
\code{list()} if none of the targets have levels.
}

\section{Methods}{

Only methods inherited from \code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
}

\examples{
\dontrun{
# Create a binary class task from iris
library(mlr3)
trafo_fun = function(x) {factor(ifelse(x$Species == "setosa", "setosa", "other"))}
po = PipeOpUpdateTarget$new(param_vals = list(trafo = trafo_fun, new_target_name = "setosa"))
po$train(list(tsk("iris")))
po$predict(list(tsk("iris")))
}
}
\seealso{
Other PipeOps: 
\code{\link{mlr_pipeop_ordinalclassif}},
\code{\link{mlr_pipeop_ordinalregr}}
}
\concept{PipeOps}
\concept{mlr3pipelines backend related}
